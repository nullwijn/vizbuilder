dir()
install.packages("usethis")
install.packages("devtools")
devtools::install_github("klutometis/roxygen")
setwd
dir()
source("~/.active-rstudio-document", echo=TRUE)
here::dr_here()
source("~/.active-rstudio-document", echo=TRUE)
# Add your library below.
library(shiny)
library(ggplot2)
# Add your library below.
library(shiny)
library(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
# Add your library below.
library(shiny)
library(ggplot2)
library(plotly)
#Load data
df <- read.csv("http://www2.census.gov/programs-surveys/popest/tables/2010-2011/state/totals/nst-est2011-01.csv")
#Clean up data frame
colnames(df) <- c("Location","Census","Estimates Base","2010","2011")
df <- df[4:61,1:5]
df <- df[-57,]
rownames(df) <- 1:nrow(df)
df$Location <- gsub("^\\.", "", df$Location)
# Remove commas from fake numeric columns
df[, c("Census","Estimates Base","2010","2011")] <- lapply(df[, c("Census","Estimates Base","2010","2011")], function(x) gsub(",", "", x))
# Make fake numeric columns real numeric
df[, c("Census","Estimates Base","2010","2011")] <- lapply(df[, c("Census","Estimates Base","2010","2011")], function(x) as.numeric(x))
ui <- fluidPage(
# Create a basic panel and sidebar with dropdown input selections
titlePanel("Customize a scatterplot based on the census data"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "x", label = "X-axis", choices = colnames(df)),
selectInput(inputId = "y", label = "Y-axis", choices = colnames(df)),
selectInput(inputId = "color", label = "Color", choices = colnames(df)),
selectInput(inputId = "size", label = "Size", choices = colnames(df))
),
mainPanel(
plotlyOutput(outputId = "scatterplot")
)
)
)
df <- df[, -c(ncol(df)-2:ncol(df))]
server <- function(input, output) {
# Create a reactive data frame to catch the inputs and put them into the plot
data <- reactive({
df[, c(input$x, input$y, input$color, input$size)]
})
# Create the scatterplot using ggplot and plotly
# Input variables are passed to the server as strings in Shiny, so I need to use !!as.name to grab the actual value
output$scatterplot <- renderPlotly({
ggplot(data(), aes(x = !!as.name(input$x), y = !!as.name(input$y), color = !!as.name(input$color), size = !!as.name(input$size))) +
geom_point() +
labs(x = input$x, y = input$y, color = input$color, size = input$size) +
theme(axis.text.x = element_text(angle = 90)) #Make x-axis values vertical so that they are legible
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# Create a basic panel and sidebar with dropdown input selections
titlePanel("Customize a scatterplot based on the census data"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "x", label = "X-axis", choices = colnames(df)),
selectInput(inputId = "y", label = "Y-axis", choices = colnames(df)),
selectInput(inputId = "color", label = "Color", choices = colnames(df)),
selectInput(inputId = "size", label = "Size", choices = colnames(df))
),
mainPanel(
plotlyOutput(outputId = "scatterplot")
)
)
)
server <- function(input, output) {
# Create a reactive data frame to catch the inputs and put them into the plot
data <- reactive({
df[, c(input$x, input$y, input$color, input$size)]
})
# Create the scatterplot using ggplot and plotly
# Input variables are passed to the server as strings in Shiny, so I need to use !!as.name to grab the actual value
output$scatterplot <- renderPlotly({
ggplot(data(), aes(x = !!as.name(input$x), y = !!as.name(input$y), color = !!as.name(input$color), size = !!as.name(input$size))) +
geom_point() +
labs(x = input$x, y = input$y, color = input$color, size = input$size) +
theme(axis.text.x = element_text(angle = 90)) #Make x-axis values vertical so that they are legible
})
}
shinyApp(ui = ui, server = server)
install.packages("Shiny")
y
install.packages("shiny")
source("~/GitHub/test.r", echo=TRUE)
